// src/cryptopp.cpp
#include <cryptopp/default.h> // DefaultEncryptor, DefaultDecryptor
#include <cryptopp/filters.h> // StringSink, StringSource
#include <cryptopp/base64.h> // Base64Encoder, Base64Decoder
#include <cryptopp/hex.h> // HexEncoder
#include <cryptopp/sha.h> // SHA256
#include <cryptopp/xed25519.h> // ed25519..
#include <cryptopp/osrng.h> // AutoSeededRandomPool
#include <cryptopp/eccrypto.h> // ECDH, ECP, SHA256
#include <cryptopp/oids.h> // ASN1::secp256r1
#include "cryptopp.h"

using CryptoPP::ECP, CryptoPP::OID;
using CryptoPP::SecByteBlock;

std::string ztx::cryptopp::Encrypt(const std::string& message) {
  std::string cipher, output;

  // Encrypt using AES-256 and password
  CryptoPP::StringSource enc_source(message, true, new CryptoPP::DefaultEncryptor(
    "Hands-On Cryptography with C++",
    new CryptoPP::StringSink(cipher)
  ));

  // Format the ciphertext with base64
  CryptoPP::StringSource b64_source(cipher, true,  new CryptoPP::Base64Encoder(
    new CryptoPP::StringSink(output),
    false // no line breaks
  ));

  return output.c_str();
}

std::string ztx::cryptopp::Hash_Function(const std::string& message) {
  std::string output;
  CryptoPP::SHA256 hash;

  // Hash the message using SHA-256
  CryptoPP::StringSource source(message, true, new CryptoPP::HashFilter(
    hash,
    new CryptoPP::HexEncoder(new CryptoPP::StringSink(output))
  ));

  return output;
}