file: src/main.cpp
line: 22
align: top
---
⇥↓↓↓↓↓↓↓⇥  // read the first argument to identify potential -h or id call
  auto flag = std::string(argv[1]);
  if (flag == "id") {
    // setup the identity or open it (ECDH private/public key)
    // Note: no need to store in memory.
    user = new wiz::Identity(id_file);
    std::cout << static_cast<std::string>(*user);

    // Job done.
    delete user;
    return 0;
  }↓↓↓↓↓↓↓↓↓↓↓⇥  // first setup the current identity (ECDH private/public key)
  user = new wiz::Identity(id_file);

  // creates a ECDH ephemeral private key for communications
  // between `user` (the sender) and `chatee` (the recipient).
  wiz::Contact* chatee = new wiz::Contact(contact);
  wiz::Whisper*   chat = new wiz::Whisper(*user, *chatee);
  std::cout << "Session created successfully." << std::endl;

  // in the case of decryption, an exception is thrown if
  // the decrypting private key is not the recipient key.
  try {
    // handles the "wiz read" and "wiz write" commands
    std::string result = chat->Handle(command, whisper);

    // prints the ciphertext (write) or plaintext (read)
    std::cout << "Whisper: " << result << std::endl;
  }
  catch (Botan::Exception& e) {
    std::cerr << "Error: " << e.what() << std::endl;
    std::cerr << "Decryption failed. Must be recipient to decrypt!" << std::endl;
  }
