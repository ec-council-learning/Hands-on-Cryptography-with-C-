file: src/client.cpp
line: 1
align: top
---
â‡¥
#include <iostream>
#include <exception>
#include <botan/tls_session_manager_memory.h>
#include "client.h"

typedef boost::asio::io_context               iocontext_t;
typedef boost::asio::ip::tcp::resolver        resolver_t;
typedef Botan::TLS::Session_Manager_In_Memory session_mgr_t;
typedef HTTPSafe::CredentialsManager          creds_mgr_t;
typedef HTTPSafe::TLSPolicy                   tls_policy_t;

HTTPSafe::Client::Client(
  iocontext_t& io_context,
  const std::string& host,
  const std::string& port
) : host_(host), resolver_(io_context), socket_(io_context), io_context_(io_context)
{
  rng_ = std::make_shared<Botan::AutoSeeded_RNG>();
  auto session_manager = std::make_shared<session_mgr_t>(rng_);
  auto creds_manager = std::make_shared<creds_mgr_t>();
  auto tls_policy = std::make_shared<tls_policy_t>();

  // Resolve the hostname to an IP address
  resolver_t::results_type endpoints = resolver_.resolve(host, port);

  // Connect to the server
  boost::asio::connect(socket_, endpoints);

  // Set up Botan TLS client
  Botan::TLS::Server_Information server_info(host, port);
  tls_client_ = std::make_unique<Botan::TLS::Client>(
    /* callbacks = */std::make_shared<HTTPSafe::Handlers>(*this),
    /* manager = */session_manager,
    /* creds   = */creds_manager,
    /* policy  = */tls_policy,
    /* rng     = */rng_,
    /* server  = */server_info,
    /* version = */Botan::TLS::Protocol_Version::TLS_V12
  );

  // Handshake starts with a read from TLS peer
  async_read_data();
}