file: src/identity.cpp
line: 1
align: top
---
â‡¥
#include "identity.h"
#include <botan/auto_rng.h> // Botan::AutoSeeded_RNG
#include <botan/ec_group.h> // Botan::EC_Group
#include <botan/pkcs8.h> // Botan::PKCS8::load_key
#include <botan/x509_key.h> // Botan::X509::PEM_encode
#include <botan/pk_keys.h> // Botan::Public_Key
#include <botan/hash.h> // Botan::HashFunction
#include <botan/hex.h> // Botan::hex_encode
#include <filesystem> // std::filesystem
#include <fstream> // std::ofstream

/// \brief Default constructor. Creates and initializes an ECDH identity
///        using the \a id_file identity file if it exists, or creates a
///        random ECDH private key if the file doesn't exist.
SMSpp::Identity::Identity(const std::string& id_file)
  : m_params(std::make_unique<Botan::ECIES_System_Params>(
    Botan::EC_Group("secp256r1"),
    "KDF2(SHA-256)",
    "AES-256/CBC", 32,
    "HMAC(SHA-256)", 32
  ))
{
  std::filesystem::directory_entry entry{id_file};

  // loads an identity from file (PEM-encoded or DER-encoded)
  if (entry.exists()) {
    Import(id_file);
  }
  // or creates a new identity and exports to file data/id_ecdh.smsid
  else {
    GenerateRandom();
    Export(id_file);
  }
}